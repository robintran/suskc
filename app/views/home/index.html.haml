.span{style: "height: 100%; width: 250px;"}
  #search-side-bar.well.sidebar-nav{style: "min-height: 90%", class: "#{'hidden' if params[:action]!='search'}"}
    .right.close{style: "margin-top: -10px;"}
      = link_to 'x', 'close'
    %h3 Search Results
    - if @locations.blank?
      No result found
    - else
      %ul#locations
        - @locations.each do |loc|
          %li{id: "#{loc.id}"}= link_to loc.name, '#', data: {pos: {lat: loc.latitude, lng: loc.longitude}, name: loc.name, email: loc.email, address: loc.address, id: loc.id}.to_json, class: 'location_item'
  #cat-side-bar.well.sidebar-nav{style: "min-height: 90%", class: "#{'hidden' if params[:action]=='search'}"}
    %h3 Categories
    %ul
      %li= link_to "All Companies", update_map_path, rel: 'all', class: "category_item #{'active' unless params[:action]=='search'}"
      - @categories.each do |cat|
        %li{id: "#{cat.id}"}= link_to cat.name, update_map_path, rel: cat.id, class: 'category_item'
    %hr{style: "color: #FFC345; background: #FFC345; height: 2px;"}
    %h3 
      Companies
    %ul#locations
      - @locations.each do |loc|
        %li{id: "#{loc.id}"}= link_to loc.name, '#', data: {pos: {lat: loc.latitude, lng: loc.longitude}, name: loc.name, email: loc.email, address: loc.address, id: loc.id}.to_json, class: "location_item#{' member' if loc.user.is_member?}"

#map_wrapper.span{style: "height: 100%; oveflow: hidden;"}
  #mymap.gmap3{style: "min-height: 96%;"}

- @locations.each do |loc|
  .well.hidden.loc_info.span2{id: "location_info_#{loc.id}", style: "position: fixed; width; 250px; min-height: 100%;margin-left: 280px; z-index: 10"}
    .right.close{style: "margin-top: -10px;"}
      =link_to 'x', 'close'
    %h2= loc.name
    .span2.no-lmargin= loc.address
    .span2.no-lmargin= loc.phone
    .span2.no-lmargin= loc.email
    .span2.no-lmargin= loc.url
    .span2.no-lmargin= loc.twitter
    .span2.no-lmargin= loc.facebook

:javascript
  $(".loc_info .close a").click(function(){
    $(".loc_info").addClass('hidden');
    return false;
  });
  
  $("#search-side-bar .close a").click(function(){
    $("#search-side-bar").addClass('hidden');
    $("#cat-side-bar").removeClass('hidden');
    return false;
  });
  
  $("#cat-side-bar a.category_item").click(function(e){
    e.preventDefault();
    $(".category_item").removeClass('active');
    $(".location_item").removeClass('active');
    $(this).addClass('active');
    $("#fading-image").show();
    $("#mymap").gmap3({action:'clear'});
    $url = $(this).attr("href");
    cat_id = $(this).attr("rel");
    data_obj = {category: cat_id}
    $.ajax({
      type: "GET",
      url: $url,
      data: data_obj,
      success: function(result) {
        $("#fading-image").hide();
        list = result;
        $("ul#locations li").addClass('hidden');
        for(i=0; i<list.length; i++){
          id = list[i].data.id;
          $("li#"+id).removeClass('hidden');
        }
        addMarkers(list);  
      }
    });
  });     

  $(".location_details").live('click', function(){
    $("li#"+$(this).attr('href')+" a").click();
    return false;
  });
  
  $(".location_item").live('click', function(){
    $(".location_item").removeClass('active');
    $(this).addClass('active');
    data = JSON.parse($(this).attr("data"));
    pos = data.pos;
    latLng = new google.maps.LatLng(pos.lat, pos.lng);
    content = "<div class='marker_info'><div class='right close'><a href='#'>x</a></div><div class='info'><h3>" + data.name + "</h3>" + data.email + "<br/>" + data.address + "</div></div>";
    make_overlay(latLng, content, data.id);            
    $("#mymap").gmap3({action: 'setCenter', args:[latLng]});
    $("#mymap").gmap3('get').setZoom(16);
  })
  
  $(".marker_info .close a").live('click', function(e){
    $("#mymap").gmap3({action: 'clear', name: 'overlay'});
  });

  var cluster;  
  $(function(){
    sreen_w=screen.width - 420;
    $("#mymap").css('width', sreen_w);
    $("#map_wrapper").css('width', sreen_w);
    $('#mymap').gmap3({ action: 'init',
      options:{
        center:[39.0997265, -94.5785667],
        zoom: 12,
        minZoom: 10
      },
      callback: function(map){
        waitForBounds(map);
      },
      events:{
        click: function(map, event){
          //addMarkerToCluster($(this), event.latLng);
        },
        rightclick: function(map, event){
          //addMarkersToCluster($(this), event.latLng);
        }
      }
    });
  });
      
  function waitForBounds(map){
    var ne, sw, bounds = map.getBounds();
    if (!bounds){
      google.maps.event.addListenerOnce(map, 'bounds_changed', 
        function() {
          waitForBounds(map)
        }
      );
      return;
    }
    ne = bounds.getNorthEast();
    sw = bounds.getSouthWest();
    list = #{Point.get_points(@locations).to_json.html_safe}
    addMarkers(list);
  }
  
  function addMarkers(list){
    $('#mymap').gmap3(
      { action: 'addMarkers',
        radius: 100,
        markers: list,
        clusters:{
      	  // This style will be used for clusters with more than 0 markers
      		0: {
       		  content: '<div class="cluster cluster-1">CLUSTER_COUNT</div>',
       			width: 53,
       			height: 52
       		},
       	  // This style will be used for clusters with more than 20 markers
        	20: {
        	  content: '<div class="cluster cluster-2">CLUSTER_COUNT</div>',
        		width: 56,
        		height: 55
        	},
          // This style will be used for clusters with more than 50 markers
        	50: {
            content: '<div class="cluster cluster-3">CLUSTER_COUNT</div>',
         	  width: 66,
          	height: 65
          }
        },
        callback: function(ref){ // get the cluster reference and save it in global variable
          cluster = ref;
        },
        cluster:{
          events:{
            click: function(cluster, event, data) {
              points = getPoints(data.latLng, list)
              if(points.length > 1){
                companies=""
                for(i=0; i< points.length; i++){
                  companies = companies + "<li><a class='location_details' href='" + points[i].data.id + "'>" + points[i].data.company + "</a></li>";
                }
                content = "<div class='marker_info'><div class='right close'><a href='#'>x</a></div><div class='info'><h3>" + points.length + " Companies here: </h3>"+ companies + "</div></div>";
                make_overlay(data.latLng, content, '');
              }
              cluster.map.panTo(data.latLng);
              cluster.map.setZoom(cluster.map.getZoom() + 1);
            },
            mouseover: function(cluster, event, data){
              //$(cluster.getDOMElement()).css('border', '1px solid #FF0000');
            },
            mouseout: function(cluster, event, data){
              //$(cluster.getDOMElement()).css('border', '0px');
            }
       	  }
        },
        marker: {
          options: {
            icon: "../assets/bg-digital.png"
          },
          events:{  
            click: function(marker, event, data){
              pos = marker.getPosition();
              content = "<div class='marker_info'><div class='right close'><a href='#'>x</a></div><div class='info'><h3>" + data.company + "</h3>" + data.email + "<br/>" + data.address + "</div></div>";
              make_overlay(pos, content, data.id);            
              marker.map.panTo(pos);
              marker.map.setZoom(16);
            },
            mouseout: function(){
              //$(this).gmap3({action:'clear', name:'overlay'});
            }
          }
        }
      }
    );
  }
  
  function make_overlay(pos, content, id){
    $(".loc_info").addClass('hidden');
    $("#location_info_" + id).removeClass('hidden');
    $(".location_item").removeClass('active');
    if(id != ''){
      $("li#"+id+" a").addClass('active');
    }
    $("#mymap").gmap3({action:'clear', name:'overlay'});
    $("#mymap").gmap3(
      { action:'clear', name:'overlay'},
      { action:'addOverlay',
        latLng: pos,
        content: content,
        offset: {
          x: 10,
          y: -10
        }
      }
    );  
  }
  
  function getPoints(pos, list){
    points = []
    for (i = 0; i < list.length; i++){
      if(list[i].lat.toFixed(7) == pos.lat().toFixed(7) && list[i].lng.toFixed(7) == pos.lng().toFixed(7)){
        points.push(list[i]);
      }
    }
    return points;
  }
